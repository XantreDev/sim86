---
source: src/main.rs
expression: "str::from_utf8(res.as_slice()).unwrap()"
---
mov dx, 6 ; dx 0x0000 -> 0x0006
mov bp, 1000 ; bp 0x0000 -> 0x03e8
mov si, 0 ; si 0x0000 -> 0x0000
mov [bp+si], si ; 0x0000 -> (0x03e8)
add si, 2 ; si 0x0000 -> 0x0002 flags: None -> None
cmp si, dx ; flags: None -> CPAS
jne $-7+0 ; ip 0x0007 -> 0x0009
mov [bp+si], si ; 0x0002 -> (0x03ea)
add si, 2 ; si 0x0002 -> 0x0004 flags: CPAS -> None
cmp si, dx ; flags: None -> CAS
jne $-7+0 ; ip 0x0007 -> 0x0009
mov [bp+si], si ; 0x0004 -> (0x03ec)
add si, 2 ; si 0x0004 -> 0x0006 flags: CAS -> P
cmp si, dx ; flags: P -> PZ
jne $-7+0 ; ip 0x0010 -> 0x0012
mov bx, 0 ; bx 0x0000 -> 0x0000
mov si, 0 ; si 0x0006 -> 0x0000
mov cx, [bp+si] ; cx 0x0000 -> 0x0000
add bx, cx ; bx 0x0000 -> 0x0000 flags: PZ -> PZ
add si, 2 ; si 0x0000 -> 0x0002 flags: PZ -> None
cmp si, dx ; flags: None -> CPAS
jne $-9+0 ; ip 0x0016 -> 0x0018
mov cx, [bp+si] ; cx 0x0000 -> 0x0002
add bx, cx ; bx 0x0000 -> 0x0002 flags: CPAS -> None
add si, 2 ; si 0x0002 -> 0x0004 flags: None -> None
cmp si, dx ; flags: None -> CAS
jne $-9+0 ; ip 0x0016 -> 0x0018
mov cx, [bp+si] ; cx 0x0002 -> 0x0004
add bx, cx ; bx 0x0002 -> 0x0006 flags: CAS -> P
add si, 2 ; si 0x0004 -> 0x0006 flags: P -> P
cmp si, dx ; flags: P -> PZ
jne $-9+0 ; ip 0x0021 -> 0x0023

Final registers: 
ax 0x0000 (0)
bx 0x0006 (6)
cx 0x0004 (4)
dx 0x0006 (6)
sp 0x0000 (0)
bp 0x03e8 (1000)
si 0x0006 (6)
di 0x0000 (0)
ip: 0x0023 (35)
flags: PZ
